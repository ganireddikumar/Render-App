services:
  - type: web
    name: rag-backend
    env: python
    buildCommand: pip install -r requirements.txt
    preDeployCommand: |
      python -c "
      import mysql.connector
      import os
      conn = mysql.connector.connect(
        host=os.getenv('MYSQL_HOST'),
        port=int(os.getenv('MYSQL_PORT')),
        user=os.getenv('MYSQL_USER'),
        password=os.getenv('MYSQL_PASSWORD'),
        database=os.getenv('MYSQL_DB'),
        ssl_mode='VERIFY_IDENTITY'
      )
      cursor = conn.cursor()
      cursor.execute('''
        CREATE TABLE IF NOT EXISTS documents (
          id INT AUTO_INCREMENT PRIMARY KEY,
          filename VARCHAR(255) NOT NULL,
          file_type VARCHAR(50) NOT NULL,
          upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          status VARCHAR(50) DEFAULT 'processed'
        )
      ''')
      cursor.execute('''
        CREATE TABLE IF NOT EXISTS document_chunks (
          id INT AUTO_INCREMENT PRIMARY KEY,
          document_id INT,
          chunk_text TEXT NOT NULL,
          chunk_index INT NOT NULL,
          FOREIGN KEY (document_id) REFERENCES documents(id)
        )
      ''')
      cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations (
          id INT AUTO_INCREMENT PRIMARY KEY,
          document_id INT,
          question TEXT NOT NULL,
          answer TEXT NOT NULL,
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (document_id) REFERENCES documents(id)
        )
      ''')
      conn.commit()
      cursor.close()
      conn.close()
      "
    startCommand: gunicorn app:app --bind 0.0.0.0:$PORT --workers 2 --timeout 120 --preload
    envVars:
      - key: MYSQL_HOST
        value: gateway01.ap-southeast-1.prod.aws.tidbcloud.com
      - key: MYSQL_PORT
        value: 4000
      - key: MYSQL_USER
        value: 3jqdfp7FVivSCKx.root
      - key: MYSQL_PASSWORD
        sync: false
      - key: MYSQL_DB
        value: test
      - key: WEAVIATE_URL
        sync: false
      - key: WEAVIATE_API_KEY
        sync: false
      - key: TOGETHER_API_KEY
        sync: false
      - key: TIDB_CA_CERT
        sync: false
      - key: FLASK_SECRET_KEY
        value: gani
      - key: CORS_ORIGIN
        value: https://your-frontend-url.onrender.com
    disk:
      name: uploads
      mountPath: /app/uploads
      sizeGB: 1

  - type: web
    name: rag-frontend
    env: static
    buildCommand: cd frontend && npm install && npm run build
    staticPublishPath: ./frontend/build
    envVars:
      - key: REACT_APP_API_URL
        value: https://your-backend-url.onrender.com
